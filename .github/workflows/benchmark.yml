name: Benchmark

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.rs'
      - 'napi/parser/**/*.js'
      - 'napi/parser/**/*.mjs'
      - 'Cargo.lock'
      - '.github/workflows/benchmark.yml'
      - 'tasks/benchmark/codspeed/*.mjs'
  push:
    branches:
      - main
      - bench-*
    paths:
      - '**/*.rs'
      - 'napi/parser/**/*.js'
      - 'napi/parser/**/*.mjs'
      - 'Cargo.lock'
      - '.github/workflows/benchmark.yml'
      - 'tasks/benchmark/codspeed/*.mjs'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  benchmark-napi:
    name: Benchmark NAPI parser
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode: [full]
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          show-progress: false
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          shared-key: benchmark_napi_ast_transfer
          save-cache: true

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # CodSpeed gets measurements completely off for NAPI if run in `CodSpeedHQ/action`,
      # so instead run real benchmark without CodSpeed's instrumentation and save the results.
      # `generateFake.mjs` generates fake `.out` files like what CodSpeed generates,
      # and they're uploaded as artefacts like the rest of the benchmarks.
      # This is all a workaround for https://github.com/CodSpeedHQ/action/issues/96
      - name: Build benchmark
        working-directory: ./napi/parser
        run: |
          corepack enable
          pnpm install
          pnpm build

      - name: Create temp dir
        working-directory: ./tasks/benchmark/codspeed
        run: node create_temp_dir.mjs

      - name: Run benchmark
        working-directory: ./napi/parser
        env:
          DESERIALIZE_ONLY: ${{ matrix.mode == 'deserialize_only' && 'true' || '' }}
        run: node parse.bench.mjs

      - name: Generate bench data files
        working-directory: ./tasks/benchmark/codspeed
        run: node generateFake.mjs

      - name: Upload bench data artefact
        uses: actions/upload-artifact@v4
        with:
          name: parser_napi${{ matrix.mode == 'deserialize_only' && '_deser' || '' }}
          path: ${{ env.DATA_DIR }}
          if-no-files-found: error
          retention-days: 1

  benchmark-napi-instrumented:
    name: Benchmark NAPI parser with CodSpeed instrumentation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode: [full]
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          show-progress: false
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          shared-key: benchmark_napi_ast_transfer
          save-cache: false

      - name: Install codspeed
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-codspeed

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Start bench results interceptor server
        working-directory: ./tasks/benchmark/codspeed
        env:
          COMPONENT: parser_napi${{ matrix.mode == 'deserialize_only' && '_deser' || '' }}_inst
        run: |
          corepack enable
          pnpm install
          node capture.mjs &

      - name: Build benchmark
        working-directory: ./napi/parser
        run: |
          corepack enable
          pnpm install
          pnpm build

      - name: Run benchmark
        uses: CodSpeedHQ/action@v2
        timeout-minutes: 30
        env:
          CODSPEED: 'true'
          DESERIALIZE_ONLY: ${{ matrix.mode == 'deserialize_only' && 'true' || '' }}
        with:
          run: node parse.bench.mjs
          working-directory: ./napi/parser
          # Dummy token for tokenless runs, to suppress logging hash of metadata JSON (see `upload.mjs`)
          token: ${{ secrets.CODSPEED_TOKEN || 'dummy' }}
          upload-url: http://localhost:${{ env.INTERCEPT_PORT }}/upload

      - name: Upload bench data artefact
        uses: actions/upload-artifact@v4
        with:
          name: parser_napi${{ matrix.mode == 'deserialize_only' && '_deser' || '' }}_inst
          path: ${{ env.DATA_DIR }}
          if-no-files-found: error
          retention-days: 1

  upload:
    name: Upload benchmarks
    needs: [benchmark-napi, benchmark-napi-instrumented]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          show-progress: false
          persist-credentials: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Create temp dir
        working-directory: ./tasks/benchmark/codspeed
        run: |
          corepack enable
          pnpm install
          node create_temp_dir.mjs

      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.DATA_DIR }}
          merge-multiple: true

      - name: Upload to Codspeed
        working-directory: ./tasks/benchmark/codspeed
        env:
          CODSPEED_TOKEN: ${{ secrets.CODSPEED_TOKEN }}
        run: node upload.mjs
